using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the equalizeArray function below.
    static int equalizeArray(int[] arr) {
        Array.Sort(arr);
        int count = 1; // number of repeatable
        int highest = 0; // highest count
        
        for( int a = 0; a < arr.Length -1; a++){
           
            if(arr[a] == arr[a+1]){
                count++; 
                if(count > highest){
                    highest = count;    
                } 
            } else {               
                count= 1;
                continue;   
            }       
        } 
        if (highest == 0){
            return arr.Length-1;
        }
        return arr.Length - highest;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        int[] arr = Array.ConvertAll(Console.ReadLine().Split(' '), arrTemp => Convert.ToInt32(arrTemp))
        ;
        int result = equalizeArray(arr);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
